name: CI-CD-dev
on: 
  push:  
    branches:  
      - dev
    
permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results
  actions: write

jobs: 

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code  
        uses: actions/checkout@v3
      - name: Lint Code Base - google
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: dev
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: /
          JAVA_FILE_NAME: checkstyle-google-modifed.xml
          VALIDATE_MARKDOWN: false
          VALIDATE_YAML: false
      - name: Lint Code Base - sun
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: dev
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: /
          JAVA_FILE_NAME: checkstyle-sun-modified.xml
          VALIDATE_JAVA: true
          
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code  
        uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Test app  
        run: mvn test
        
  analysis_sonarcloud:
    needs: test
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis'
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
        run: mvn verify sonar:sonar "-Dsonar.host.url=https://sonarcloud.io" -Dsonar.organization=sylvainjanet -Dsonar.projectKey=SylvainJanet_sampleJavaApp -Dsonar.java.source=1.8
            
  check_analysis_sonarcloud:
    needs: analysis_sonarcloud
    name: Check Quality Gate SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Make request
      id: httpRequest
      uses: fjogeleit/http-request-action@v1
      with:
        url: 'https://sonarcloud.io/api/qualitygates/project_status?projectKey=SylvainJanet_sampleJavaApp&branch=dev'
        method: 'GET'
    - name: Show Response
      run: |
        echo ${{ steps.httpRequest.outputs.response }}
        
    - name: Check
      if: ${{ fromJson(steps.httpRequest.outputs.response).projectStatus.status != 'OK' }} 
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed('Quality gate failed')
          
  analyse_QL:
    name: Analyze CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo "Run, Build Application using script"
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
  
  build:
    needs: [lint, analyse_QL, check_analysis_sonarcloud]
    if: always()
    runs-on: ubuntu-latest
    permissions: # The Dependency Submission API requires write permission
      contents: write
    steps:
    - name: Checkout source code  
      uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B install

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
     
    - name: Inject slug/short variables  
      uses: rlespinasse/github-slug-action@v4
    - name: Upload artifact  
      uses: actions/upload-artifact@v3  
      with:  
        name: sample-java-app-${{ env.GITHUB_REF_SLUG }}-${{ github.run_id }}-${{ github.run_number }}  
        path: ./target
          
  deploy:  
    needs : [build]
    if: always()
    runs-on: ubuntu-latest  
  
    steps:
      - name: Inject slug/short variables  
        uses: rlespinasse/github-slug-action@v4 
      - name: Download artifact  
        uses: actions/download-artifact@v3  
        with:  
          name: sample-java-app-${{ env.GITHUB_REF_SLUG }}-${{ github.run_id }}-${{ github.run_number }}  
          path: '.'
      - name: rename war file
        run: |
          mv test.backend-0.0.1-SNAPSHOT.war test-dev.war
      - name: copy file via ssh key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.KEY }}
          source: "./test-dev.war"
          target: ${{secrets.TOMCAT_PATH}}
